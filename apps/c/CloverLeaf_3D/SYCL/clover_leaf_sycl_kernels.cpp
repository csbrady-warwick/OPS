//
// auto-generated by ops.py//

//header
#define OPS_3D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
#include "user_types.h"

#include "ops_sycl_rt_support.h"
#include "ops_sycl_reduction.h"
// global constants
cl::sycl::buffer<double,1> *g_small_p=nullptr;
extern double g_small;
cl::sycl::buffer<double,1> *g_big_p=nullptr;
extern double g_big;
cl::sycl::buffer<double,1> *dtc_safe_p=nullptr;
extern double dtc_safe;
cl::sycl::buffer<double,1> *dtu_safe_p=nullptr;
extern double dtu_safe;
cl::sycl::buffer<double,1> *dtv_safe_p=nullptr;
extern double dtv_safe;
cl::sycl::buffer<double,1> *dtw_safe_p=nullptr;
extern double dtw_safe;
cl::sycl::buffer<double,1> *dtdiv_safe_p=nullptr;
extern double dtdiv_safe;
cl::sycl::buffer<field_type,1> *field_p=nullptr;
extern field_type field;
cl::sycl::buffer<grid_type,1> *grid_p=nullptr;
extern grid_type grid;
cl::sycl::buffer<state_type,1> *states_p=nullptr;
extern state_type *states;
cl::sycl::buffer<int,1> *number_of_states_p=nullptr;
extern int number_of_states;
cl::sycl::buffer<int,1> *g_sphe_p=nullptr;
extern int g_sphe;
cl::sycl::buffer<int,1> *g_point_p=nullptr;
extern int g_point;
cl::sycl::buffer<int,1> *g_cube_p=nullptr;
extern int g_cube;
cl::sycl::buffer<double,1> *dt_p=nullptr;
extern double dt;

void ops_init_backend() {}

void ops_decl_const_char(int dim, char const * type, int size, char * dat, char const * name ) {
  if (!strcmp(name,"g_small")) {
    if (g_small_p == nullptr) g_small_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*g_small_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"g_big")) {
    if (g_big_p == nullptr) g_big_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*g_big_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dtc_safe")) {
    if (dtc_safe_p == nullptr) dtc_safe_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dtc_safe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dtu_safe")) {
    if (dtu_safe_p == nullptr) dtu_safe_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dtu_safe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dtv_safe")) {
    if (dtv_safe_p == nullptr) dtv_safe_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dtv_safe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dtw_safe")) {
    if (dtw_safe_p == nullptr) dtw_safe_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dtw_safe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dtdiv_safe")) {
    if (dtdiv_safe_p == nullptr) dtdiv_safe_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dtdiv_safe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"field")) {
    if (field_p == nullptr) field_p = new cl::sycl::buffer<field_type,1>(cl::sycl::range<1>(dim));
    auto accessor = (*field_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((field_type*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"grid")) {
    if (grid_p == nullptr) grid_p = new cl::sycl::buffer<grid_type,1>(cl::sycl::range<1>(dim));
    auto accessor = (*grid_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((grid_type*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"states")) {
    if (states_p == nullptr) states_p = new cl::sycl::buffer<state_type,1>(cl::sycl::range<1>(dim));
    auto accessor = (*states_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((state_type*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"number_of_states")) {
    if (number_of_states_p == nullptr) number_of_states_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*number_of_states_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"g_sphe")) {
    if (g_sphe_p == nullptr) g_sphe_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*g_sphe_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"g_point")) {
    if (g_point_p == nullptr) g_point_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*g_point_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"g_cube")) {
    if (g_cube_p == nullptr) g_cube_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*g_cube_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dt")) {
    if (dt_p == nullptr) dt_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dt_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "initialise_chunk_kernel_xx_sycl_kernel.cpp"
#include "initialise_chunk_kernel_yy_sycl_kernel.cpp"
#include "initialise_chunk_kernel_zz_sycl_kernel.cpp"
#include "initialise_chunk_kernel_x_sycl_kernel.cpp"
#include "initialise_chunk_kernel_y_sycl_kernel.cpp"
#include "initialise_chunk_kernel_z_sycl_kernel.cpp"
#include "initialise_chunk_kernel_cellx_sycl_kernel.cpp"
#include "initialise_chunk_kernel_celly_sycl_kernel.cpp"
#include "initialise_chunk_kernel_cellz_sycl_kernel.cpp"
#include "initialise_chunk_kernel_volume_sycl_kernel.cpp"
#include "generate_chunk_kernel_sycl_kernel.cpp"
#include "ideal_gas_kernel_sycl_kernel.cpp"
#include "update_halo_kernel1_b2_sycl_kernel.cpp"
#include "update_halo_kernel1_b1_sycl_kernel.cpp"
#include "update_halo_kernel1_t2_sycl_kernel.cpp"
#include "update_halo_kernel1_t1_sycl_kernel.cpp"
#include "update_halo_kernel1_l2_sycl_kernel.cpp"
#include "update_halo_kernel1_l1_sycl_kernel.cpp"
#include "update_halo_kernel1_r2_sycl_kernel.cpp"
#include "update_halo_kernel1_r1_sycl_kernel.cpp"
#include "update_halo_kernel1_ba2_sycl_kernel.cpp"
#include "update_halo_kernel1_ba1_sycl_kernel.cpp"
#include "update_halo_kernel1_fr2_sycl_kernel.cpp"
#include "update_halo_kernel1_fr1_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_top_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_top_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_4_left_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_2_left_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_4_right_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_minus_2_right_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel2_xvel_plus_2_front_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_4_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_2_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_4_top_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_minus_2_top_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_left_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_left_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_right_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_right_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel2_yvel_plus_2_front_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_4_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_2_bot_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_4_top_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_2_top_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_4_left_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_2_left_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_4_right_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_plus_2_right_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_minus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_minus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_minus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel2_zvel_minus_2_front_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_4_a_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_2_a_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_4_b_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_2_b_sycl_kernel.cpp"
#include "update_halo_kernel3_minus_4_a_sycl_kernel.cpp"
#include "update_halo_kernel3_minus_2_a_sycl_kernel.cpp"
#include "update_halo_kernel3_minus_4_b_sycl_kernel.cpp"
#include "update_halo_kernel3_minus_2_b_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel3_plus_2_front_sycl_kernel.cpp"
#include "update_halo_kernel4_minus_4_a_sycl_kernel.cpp"
#include "update_halo_kernel4_minus_2_a_sycl_kernel.cpp"
#include "update_halo_kernel4_minus_4_b_sycl_kernel.cpp"
#include "update_halo_kernel4_minus_2_b_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_4_a_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_2_a_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_4_b_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_2_b_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel4_plus_2_front_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_4_a_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_2_a_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_4_b_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_2_b_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_4_left_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_2_left_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_4_right_sycl_kernel.cpp"
#include "update_halo_kernel5_plus_2_right_sycl_kernel.cpp"
#include "update_halo_kernel5_minus_4_back_sycl_kernel.cpp"
#include "update_halo_kernel5_minus_2_back_sycl_kernel.cpp"
#include "update_halo_kernel5_minus_4_front_sycl_kernel.cpp"
#include "update_halo_kernel5_minus_2_front_sycl_kernel.cpp"
#include "field_summary_kernel_sycl_kernel.cpp"
#include "viscosity_kernel_sycl_kernel.cpp"
#include "calc_dt_kernel_sycl_kernel.cpp"
#include "calc_dt_kernel_min_sycl_kernel.cpp"
#include "calc_dt_kernel_get_sycl_kernel.cpp"
#include "calc_dt_kernel_print_sycl_kernel.cpp"
#include "PdV_kernel_predict_sycl_kernel.cpp"
#include "PdV_kernel_nopredict_sycl_kernel.cpp"
#include "revert_kernel_sycl_kernel.cpp"
#include "accelerate_kernel_sycl_kernel.cpp"
#include "flux_calc_kernelx_sycl_kernel.cpp"
#include "flux_calc_kernely_sycl_kernel.cpp"
#include "flux_calc_kernelz_sycl_kernel.cpp"
#include "advec_cell_kernel1_xdir_sycl_kernel.cpp"
#include "advec_cell_kernel2_xdir_sycl_kernel.cpp"
#include "advec_cell_kernel3_xdir_sycl_kernel.cpp"
#include "advec_cell_kernel4_xdir_sycl_kernel.cpp"
#include "advec_cell_kernel1_ydir_sycl_kernel.cpp"
#include "advec_cell_kernel2_ydir_sycl_kernel.cpp"
#include "advec_cell_kernel3_ydir_sycl_kernel.cpp"
#include "advec_cell_kernel4_ydir_sycl_kernel.cpp"
#include "advec_cell_kernel1_zdir_sycl_kernel.cpp"
#include "advec_cell_kernel2_zdir_sycl_kernel.cpp"
#include "advec_cell_kernel3_zdir_sycl_kernel.cpp"
#include "advec_cell_kernel4_zdir_sycl_kernel.cpp"
#include "advec_mom_kernel_x1_sycl_kernel.cpp"
#include "advec_mom_kernel_z1_sycl_kernel.cpp"
#include "advec_mom_kernel_x2_sycl_kernel.cpp"
#include "advec_mom_kernel_y2_sycl_kernel.cpp"
#include "advec_mom_kernel_x3_sycl_kernel.cpp"
#include "advec_mom_kernel_z3_sycl_kernel.cpp"
#include "advec_mom_kernel_mass_flux_x_sycl_kernel.cpp"
#include "advec_mom_kernel_post_pre_advec_x_sycl_kernel.cpp"
#include "advec_mom_kernel1_x_nonvector_sycl_kernel.cpp"
#include "advec_mom_kernel2_x_sycl_kernel.cpp"
#include "advec_mom_kernel_mass_flux_y_sycl_kernel.cpp"
#include "advec_mom_kernel_post_pre_advec_y_sycl_kernel.cpp"
#include "advec_mom_kernel1_y_nonvector_sycl_kernel.cpp"
#include "advec_mom_kernel2_y_sycl_kernel.cpp"
#include "advec_mom_kernel_mass_flux_z_sycl_kernel.cpp"
#include "advec_mom_kernel_post_pre_advec_z_sycl_kernel.cpp"
#include "advec_mom_kernel1_z_nonvector_sycl_kernel.cpp"
#include "advec_mom_kernel2_z_sycl_kernel.cpp"
#include "reset_field_kernel1_sycl_kernel.cpp"
#include "reset_field_kernel2_sycl_kernel.cpp"
