//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_advec_cell_kernel4_ydir(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
#else
void ops_par_loop_advec_cell_kernel4_ydir_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9,
 arg10};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,11,range,116)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,116,"advec_cell_kernel4_ydir");
    block->instance->OPS_kernels[116].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "advec_cell_kernel4_ydir");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 11,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_advec_cell_kernel4_ydir = args[0].dat->size[0];
  int ydim0_advec_cell_kernel4_ydir = args[0].dat->size[1];
  int xdim1_advec_cell_kernel4_ydir = args[1].dat->size[0];
  int ydim1_advec_cell_kernel4_ydir = args[1].dat->size[1];
  int xdim2_advec_cell_kernel4_ydir = args[2].dat->size[0];
  int ydim2_advec_cell_kernel4_ydir = args[2].dat->size[1];
  int xdim3_advec_cell_kernel4_ydir = args[3].dat->size[0];
  int ydim3_advec_cell_kernel4_ydir = args[3].dat->size[1];
  int xdim4_advec_cell_kernel4_ydir = args[4].dat->size[0];
  int ydim4_advec_cell_kernel4_ydir = args[4].dat->size[1];
  int xdim5_advec_cell_kernel4_ydir = args[5].dat->size[0];
  int ydim5_advec_cell_kernel4_ydir = args[5].dat->size[1];
  int xdim6_advec_cell_kernel4_ydir = args[6].dat->size[0];
  int ydim6_advec_cell_kernel4_ydir = args[6].dat->size[1];
  int xdim7_advec_cell_kernel4_ydir = args[7].dat->size[0];
  int ydim7_advec_cell_kernel4_ydir = args[7].dat->size[1];
  int xdim8_advec_cell_kernel4_ydir = args[8].dat->size[0];
  int ydim8_advec_cell_kernel4_ydir = args[8].dat->size[1];
  int xdim9_advec_cell_kernel4_ydir = args[9].dat->size[0];
  int ydim9_advec_cell_kernel4_ydir = args[9].dat->size[1];
  int xdim10_advec_cell_kernel4_ydir = args[10].dat->size[0];
  int ydim10_advec_cell_kernel4_ydir = args[10].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> density1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double)));

  int base1 = args[1].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> energy1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double)));

  int base2 = args[2].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> mass_flux_y_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[2].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[2].dat->mem/sizeof(double)));

  int base3 = args[3].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> vol_flux_y_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[3].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[3].dat->mem/sizeof(double)));

  int base4 = args[4].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> pre_vol_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[4].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[4].dat->mem/sizeof(double)));

  int base5 = args[5].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> post_vol_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[5].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[5].dat->mem/sizeof(double)));

  int base6 = args[6].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> pre_mass_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[6].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[6].dat->mem/sizeof(double)));

  int base7 = args[7].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> post_mass_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[7].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[7].dat->mem/sizeof(double)));

  int base8 = args[8].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> advec_vol_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[8].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[8].dat->mem/sizeof(double)));

  int base9 = args[9].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> post_ener_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[9].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[9].dat->mem/sizeof(double)));

  int base10 = args[10].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> ener_flux_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[10].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[10].dat->mem/sizeof(double)));



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 11);
  ops_halo_exchanges(args,11,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[116].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_density1 = density1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_energy1 = energy1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_mass_flux_y = mass_flux_y_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_vol_flux_y = vol_flux_y_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_pre_vol = pre_vol_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_post_vol = post_vol_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_pre_mass = pre_mass_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_post_mass = post_mass_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_advec_vol = advec_vol_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_post_ener = post_ener_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_ener_flux = ener_flux_p.get_access<cl::sycl::access::mode::read_write>(cgh);


    cgh.parallel_for<class advec_cell_kernel4_ydir_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
          ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
         ,((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y
         ,((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z
           ),cl::sycl::range<3>(block->instance->OPS_block_size_x
           , block->instance->OPS_block_size_y
           , block->instance->OPS_block_size_z
           )), [=](cl::sycl::nd_item<3> item) {
      cl::sycl::cl_int n_z = item.get_global_id()[2]+start_2;
      cl::sycl::cl_int n_y = item.get_global_id()[1]+start_1;
      cl::sycl::cl_int n_x = item.get_global_id()[0]+start_0;
      ACC<double> density1(xdim0_advec_cell_kernel4_ydir, ydim0_advec_cell_kernel4_ydir, &Accessor_density1[0] + base0 + n_x*1 + n_y * xdim0_advec_cell_kernel4_ydir*1 + n_z * xdim0_advec_cell_kernel4_ydir * ydim0_advec_cell_kernel4_ydir*1);
      ACC<double> energy1(xdim1_advec_cell_kernel4_ydir, ydim1_advec_cell_kernel4_ydir, &Accessor_energy1[0] + base1 + n_x*1 + n_y * xdim1_advec_cell_kernel4_ydir*1 + n_z * xdim1_advec_cell_kernel4_ydir * ydim1_advec_cell_kernel4_ydir*1);
      const ACC<double> mass_flux_y(xdim2_advec_cell_kernel4_ydir, ydim2_advec_cell_kernel4_ydir, &Accessor_mass_flux_y[0] + base2 + n_x*1 + n_y * xdim2_advec_cell_kernel4_ydir*1 + n_z * xdim2_advec_cell_kernel4_ydir * ydim2_advec_cell_kernel4_ydir*1);
      const ACC<double> vol_flux_y(xdim3_advec_cell_kernel4_ydir, ydim3_advec_cell_kernel4_ydir, &Accessor_vol_flux_y[0] + base3 + n_x*1 + n_y * xdim3_advec_cell_kernel4_ydir*1 + n_z * xdim3_advec_cell_kernel4_ydir * ydim3_advec_cell_kernel4_ydir*1);
      const ACC<double> pre_vol(xdim4_advec_cell_kernel4_ydir, ydim4_advec_cell_kernel4_ydir, &Accessor_pre_vol[0] + base4 + n_x*1 + n_y * xdim4_advec_cell_kernel4_ydir*1 + n_z * xdim4_advec_cell_kernel4_ydir * ydim4_advec_cell_kernel4_ydir*1);
      const ACC<double> post_vol(xdim5_advec_cell_kernel4_ydir, ydim5_advec_cell_kernel4_ydir, &Accessor_post_vol[0] + base5 + n_x*1 + n_y * xdim5_advec_cell_kernel4_ydir*1 + n_z * xdim5_advec_cell_kernel4_ydir * ydim5_advec_cell_kernel4_ydir*1);
      ACC<double> pre_mass(xdim6_advec_cell_kernel4_ydir, ydim6_advec_cell_kernel4_ydir, &Accessor_pre_mass[0] + base6 + n_x*1 + n_y * xdim6_advec_cell_kernel4_ydir*1 + n_z * xdim6_advec_cell_kernel4_ydir * ydim6_advec_cell_kernel4_ydir*1);
      ACC<double> post_mass(xdim7_advec_cell_kernel4_ydir, ydim7_advec_cell_kernel4_ydir, &Accessor_post_mass[0] + base7 + n_x*1 + n_y * xdim7_advec_cell_kernel4_ydir*1 + n_z * xdim7_advec_cell_kernel4_ydir * ydim7_advec_cell_kernel4_ydir*1);
      ACC<double> advec_vol(xdim8_advec_cell_kernel4_ydir, ydim8_advec_cell_kernel4_ydir, &Accessor_advec_vol[0] + base8 + n_x*1 + n_y * xdim8_advec_cell_kernel4_ydir*1 + n_z * xdim8_advec_cell_kernel4_ydir * ydim8_advec_cell_kernel4_ydir*1);
      ACC<double> post_ener(xdim9_advec_cell_kernel4_ydir, ydim9_advec_cell_kernel4_ydir, &Accessor_post_ener[0] + base9 + n_x*1 + n_y * xdim9_advec_cell_kernel4_ydir*1 + n_z * xdim9_advec_cell_kernel4_ydir * ydim9_advec_cell_kernel4_ydir*1);
      const ACC<double> ener_flux(xdim10_advec_cell_kernel4_ydir, ydim10_advec_cell_kernel4_ydir, &Accessor_ener_flux[0] + base10 + n_x*1 + n_y * xdim10_advec_cell_kernel4_ydir*1 + n_z * xdim10_advec_cell_kernel4_ydir * ydim10_advec_cell_kernel4_ydir*1);
      //USER CODE
      if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
        

  pre_mass(0,0,0) = density1(0,0,0) * pre_vol(0,0,0);
  post_mass(0,0,0) = pre_mass(0,0,0) + mass_flux_y(0,0,0) - mass_flux_y(0,1,0);
  post_ener(0,0,0) = ( energy1(0,0,0) * pre_mass(0,0,0) + ener_flux(0,0,0) - ener_flux(0,1,0))/post_mass(0,0,0);
  advec_vol(0,0,0) = pre_vol(0,0,0) + vol_flux_y(0,0,0) - vol_flux_y(0,1,0);
  density1(0,0,0) = post_mass(0,0,0)/advec_vol(0,0,0);
  energy1(0,0,0) = post_ener(0,0,0);


      }
    });
  });
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[116].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 11);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[116].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[116].transfer += ops_compute_transfer(dim, start, end, &arg10);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_advec_cell_kernel4_ydir(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 116;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 116;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 11;
  desc->args = (ops_arg*)ops_malloc(11*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->function = ops_par_loop_advec_cell_kernel4_ydir_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,116,"advec_cell_kernel4_ydir");
  }
  ops_enqueue_kernel(desc);
}
#endif
