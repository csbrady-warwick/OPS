//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_field_summary_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11) {
#else
void ops_par_loop_field_summary_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[12] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9,
 arg10, arg11};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,12,range,96)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,96,"field_summary_kernel");
    block->instance->OPS_kernels[96].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "field_summary_kernel");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 12,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_field_summary_kernel = args[0].dat->size[0];
  int ydim0_field_summary_kernel = args[0].dat->size[1];
  int xdim1_field_summary_kernel = args[1].dat->size[0];
  int ydim1_field_summary_kernel = args[1].dat->size[1];
  int xdim2_field_summary_kernel = args[2].dat->size[0];
  int ydim2_field_summary_kernel = args[2].dat->size[1];
  int xdim3_field_summary_kernel = args[3].dat->size[0];
  int ydim3_field_summary_kernel = args[3].dat->size[1];
  int xdim4_field_summary_kernel = args[4].dat->size[0];
  int ydim4_field_summary_kernel = args[4].dat->size[1];
  int xdim5_field_summary_kernel = args[5].dat->size[0];
  int ydim5_field_summary_kernel = args[5].dat->size[1];
  int xdim6_field_summary_kernel = args[6].dat->size[0];
  int ydim6_field_summary_kernel = args[6].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> volume_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double)));

  int base1 = args[1].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> density0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double)));

  int base2 = args[2].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> energy0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[2].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[2].dat->mem/sizeof(double)));

  int base3 = args[3].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> pressure_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[3].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[3].dat->mem/sizeof(double)));

  int base4 = args[4].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> xvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[4].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[4].dat->mem/sizeof(double)));

  int base5 = args[5].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> yvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[5].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[5].dat->mem/sizeof(double)));

  int base6 = args[6].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> zvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[6].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[6].dat->mem/sizeof(double)));

  #ifdef OPS_MPI
  double * __restrict__ p_a7 = (double *)(((ops_reduction)args[7].data)->data + ((ops_reduction)args[7].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a7 = (double *)((ops_reduction)args[7].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a8 = (double *)(((ops_reduction)args[8].data)->data + ((ops_reduction)args[8].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a8 = (double *)((ops_reduction)args[8].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a9 = (double *)(((ops_reduction)args[9].data)->data + ((ops_reduction)args[9].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a9 = (double *)((ops_reduction)args[9].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a10 = (double *)(((ops_reduction)args[10].data)->data + ((ops_reduction)args[10].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a10 = (double *)((ops_reduction)args[10].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a11 = (double *)(((ops_reduction)args[11].data)->data + ((ops_reduction)args[11].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a11 = (double *)((ops_reduction)args[11].data)->data;
  #endif //OPS_MPI


  int maxblocks = (end[0]-start[0]-1)/block->instance->OPS_block_size_x+1;
  maxblocks *= (end[1]-start[1]-1)/block->instance->OPS_block_size_y+1;
  maxblocks *= (end[2]-start[2]-1)/block->instance->OPS_block_size_z+1;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg7.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg7_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg7.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg8.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg8_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg8.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg9.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg9_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg9.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg10.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg10_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg10.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg11.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg11_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg11.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  mvReductArraysToDevice(block->instance,reduct_bytes);
  cl::sycl::buffer<char,1> *reduct = static_cast<cl::sycl::buffer<char,1> *>((void*)block->instance->OPS_reduct_d);

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 12);
  ops_halo_exchanges(args,12,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[96].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_volume = volume_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_density0 = density0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_energy0 = energy0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_pressure = pressure_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_xvel0 = xvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_yvel0 = yvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_zvel0 = zvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_reduct_char = reduct->get_access<cl::sycl::access::mode::read_write>(cgh);
    cl::sycl::accessor<char, 1, cl::sycl::access::mode::read_write, cl::sycl::access::target::local> local_mem(reduct_size*cl::sycl::range<1>(block->instance->OPS_block_size_x*block->instance->OPS_block_size_y),cgh);


    cgh.parallel_for<class field_summary_kernel_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
          ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
         ,((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y
         ,((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z
           ),cl::sycl::range<3>(block->instance->OPS_block_size_x
           , block->instance->OPS_block_size_y
           , block->instance->OPS_block_size_z
           )), [=](cl::sycl::nd_item<3> item) {
      cl::sycl::cl_int n_z = item.get_global_id()[2]+start_2;
      cl::sycl::cl_int n_y = item.get_global_id()[1]+start_1;
      cl::sycl::cl_int n_x = item.get_global_id()[0]+start_0;
      const ACC<double> volume(xdim0_field_summary_kernel, ydim0_field_summary_kernel, &Accessor_volume[0] + base0 + n_x*1 + n_y * xdim0_field_summary_kernel*1 + n_z * xdim0_field_summary_kernel * ydim0_field_summary_kernel*1);
      const ACC<double> density0(xdim1_field_summary_kernel, ydim1_field_summary_kernel, &Accessor_density0[0] + base1 + n_x*1 + n_y * xdim1_field_summary_kernel*1 + n_z * xdim1_field_summary_kernel * ydim1_field_summary_kernel*1);
      const ACC<double> energy0(xdim2_field_summary_kernel, ydim2_field_summary_kernel, &Accessor_energy0[0] + base2 + n_x*1 + n_y * xdim2_field_summary_kernel*1 + n_z * xdim2_field_summary_kernel * ydim2_field_summary_kernel*1);
      const ACC<double> pressure(xdim3_field_summary_kernel, ydim3_field_summary_kernel, &Accessor_pressure[0] + base3 + n_x*1 + n_y * xdim3_field_summary_kernel*1 + n_z * xdim3_field_summary_kernel * ydim3_field_summary_kernel*1);
      const ACC<double> xvel0(xdim4_field_summary_kernel, ydim4_field_summary_kernel, &Accessor_xvel0[0] + base4 + n_x*1 + n_y * xdim4_field_summary_kernel*1 + n_z * xdim4_field_summary_kernel * ydim4_field_summary_kernel*1);
      const ACC<double> yvel0(xdim5_field_summary_kernel, ydim5_field_summary_kernel, &Accessor_yvel0[0] + base5 + n_x*1 + n_y * xdim5_field_summary_kernel*1 + n_z * xdim5_field_summary_kernel * ydim5_field_summary_kernel*1);
      const ACC<double> zvel0(xdim6_field_summary_kernel, ydim6_field_summary_kernel, &Accessor_zvel0[0] + base6 + n_x*1 + n_y * xdim6_field_summary_kernel*1 + n_z * xdim6_field_summary_kernel * ydim6_field_summary_kernel*1);
      double vol[1];
      vol[0] = ZERO_double;
      double mass[1];
      mass[0] = ZERO_double;
      double ie[1];
      ie[0] = ZERO_double;
      double ke[1];
      ke[0] = ZERO_double;
      double press[1];
      press[0] = ZERO_double;
      //USER CODE
      if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
        

  double vsqrd, cell_vol, cell_mass;

  vsqrd = 0.0;
  vsqrd+=0.125*( xvel0(0,0,0) * xvel0(0,0,0) +
                 yvel0(0,0,0) * yvel0(0,0,0) +
                 zvel0(0,0,0) * zvel0(0,0,0));
  vsqrd+=0.125*( xvel0(1,0,0) * xvel0(1,0,0) +
                 yvel0(1,0,0) * yvel0(1,0,0) +
                 zvel0(1,0,0) * zvel0(1,0,0));
  vsqrd+=0.125*( xvel0(0,1,0) * xvel0(0,1,0) +
                 yvel0(0,1,0) * yvel0(0,1,0) +
                 zvel0(0,1,0) * zvel0(0,1,0));
  vsqrd+=0.125*( xvel0(1,1,0) * xvel0(1,1,0) +
                 yvel0(1,1,0) * yvel0(1,1,0) +
                 zvel0(1,1,0) * zvel0(1,1,0));
  vsqrd+=0.125*( xvel0(0,0,1) * xvel0(0,0,1) +
                 yvel0(0,0,1) * yvel0(0,0,1) +
                 zvel0(0,0,1) * zvel0(0,0,1));
  vsqrd+=0.125*( xvel0(1,0,1) * xvel0(1,0,1) +
                 yvel0(1,0,1) * yvel0(1,0,1) +
                 zvel0(1,0,1) * zvel0(1,0,1));
  vsqrd+=0.125*( xvel0(0,1,1) * xvel0(0,1,1) +
                 yvel0(0,1,1) * yvel0(0,1,1) +
                 zvel0(0,1,1) * zvel0(0,1,1));
  vsqrd+=0.125*( xvel0(1,1,1) * xvel0(1,1,1) +
                 yvel0(1,1,1) * yvel0(1,1,1) +
                 zvel0(1,1,1) * zvel0(1,1,1));

  cell_vol = volume(0,0,0);
  cell_mass = cell_vol * density0(0,0,0);
  *vol = *vol + cell_vol;
  *mass = *mass + cell_mass;
  *ie = *ie + cell_mass * energy0(0,0,0);
  *ke = *ke + cell_mass * 0.5 * vsqrd;
  *press = *press + cell_vol * pressure(0,0,0);


      }
      int group_size = item.get_local_range(0);
      group_size *= item.get_local_range(1);
      group_size *= item.get_local_range(2);
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg7_offset]) + d+item.get_group_linear_id()*1, vol[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg8_offset]) + d+item.get_group_linear_id()*1, mass[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg9_offset]) + d+item.get_group_linear_id()*1, ie[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg10_offset]) + d+item.get_group_linear_id()*1, ke[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg11_offset]) + d+item.get_group_linear_id()*1, press[0], (double*)&local_mem[0], item, group_size);
      }
    });
  });
  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a7[d] = p_a7[d] + ((double *)arg7.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a8[d] = p_a8[d] + ((double *)arg8.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a9[d] = p_a9[d] + ((double *)arg9.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a10[d] = p_a10[d] + ((double *)arg10.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a11[d] = p_a11[d] + ((double *)arg11.data)[d+b*1];
    }
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[96].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 12);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[96].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[96].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_field_summary_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 96;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 96;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 12;
  desc->args = (ops_arg*)ops_malloc(12*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->args[8] = arg8;
  desc->args[9] = arg9;
  desc->args[10] = arg10;
  desc->args[11] = arg11;
  desc->function = ops_par_loop_field_summary_kernel_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,96,"field_summary_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
