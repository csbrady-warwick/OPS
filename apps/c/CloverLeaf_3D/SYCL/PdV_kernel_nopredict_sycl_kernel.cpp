//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_PdV_kernel_nopredict(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16) {
#else
void ops_par_loop_PdV_kernel_nopredict_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[17] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9,
 arg10, arg11, arg12, arg13, arg14,
 arg15, arg16};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,17,range,103)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,103,"PdV_kernel_nopredict");
    block->instance->OPS_kernels[103].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "PdV_kernel_nopredict");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 17,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_PdV_kernel_nopredict = args[0].dat->size[0];
  int ydim0_PdV_kernel_nopredict = args[0].dat->size[1];
  int xdim1_PdV_kernel_nopredict = args[1].dat->size[0];
  int ydim1_PdV_kernel_nopredict = args[1].dat->size[1];
  int xdim2_PdV_kernel_nopredict = args[2].dat->size[0];
  int ydim2_PdV_kernel_nopredict = args[2].dat->size[1];
  int xdim3_PdV_kernel_nopredict = args[3].dat->size[0];
  int ydim3_PdV_kernel_nopredict = args[3].dat->size[1];
  int xdim4_PdV_kernel_nopredict = args[4].dat->size[0];
  int ydim4_PdV_kernel_nopredict = args[4].dat->size[1];
  int xdim5_PdV_kernel_nopredict = args[5].dat->size[0];
  int ydim5_PdV_kernel_nopredict = args[5].dat->size[1];
  int xdim6_PdV_kernel_nopredict = args[6].dat->size[0];
  int ydim6_PdV_kernel_nopredict = args[6].dat->size[1];
  int xdim7_PdV_kernel_nopredict = args[7].dat->size[0];
  int ydim7_PdV_kernel_nopredict = args[7].dat->size[1];
  int xdim8_PdV_kernel_nopredict = args[8].dat->size[0];
  int ydim8_PdV_kernel_nopredict = args[8].dat->size[1];
  int xdim9_PdV_kernel_nopredict = args[9].dat->size[0];
  int ydim9_PdV_kernel_nopredict = args[9].dat->size[1];
  int xdim10_PdV_kernel_nopredict = args[10].dat->size[0];
  int ydim10_PdV_kernel_nopredict = args[10].dat->size[1];
  int xdim11_PdV_kernel_nopredict = args[11].dat->size[0];
  int ydim11_PdV_kernel_nopredict = args[11].dat->size[1];
  int xdim12_PdV_kernel_nopredict = args[12].dat->size[0];
  int ydim12_PdV_kernel_nopredict = args[12].dat->size[1];
  int xdim13_PdV_kernel_nopredict = args[13].dat->size[0];
  int ydim13_PdV_kernel_nopredict = args[13].dat->size[1];
  int xdim14_PdV_kernel_nopredict = args[14].dat->size[0];
  int ydim14_PdV_kernel_nopredict = args[14].dat->size[1];
  int xdim15_PdV_kernel_nopredict = args[15].dat->size[0];
  int ydim15_PdV_kernel_nopredict = args[15].dat->size[1];
  int xdim16_PdV_kernel_nopredict = args[16].dat->size[0];
  int ydim16_PdV_kernel_nopredict = args[16].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> xarea_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double)));

  int base1 = args[1].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> xvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double)));

  int base2 = args[2].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> xvel1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[2].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[2].dat->mem/sizeof(double)));

  int base3 = args[3].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> yarea_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[3].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[3].dat->mem/sizeof(double)));

  int base4 = args[4].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> yvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[4].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[4].dat->mem/sizeof(double)));

  int base5 = args[5].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> yvel1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[5].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[5].dat->mem/sizeof(double)));

  int base6 = args[6].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> volume_change_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[6].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[6].dat->mem/sizeof(double)));

  int base7 = args[7].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> volume_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[7].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[7].dat->mem/sizeof(double)));

  int base8 = args[8].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> pressure_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[8].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[8].dat->mem/sizeof(double)));

  int base9 = args[9].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> density0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[9].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[9].dat->mem/sizeof(double)));

  int base10 = args[10].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> density1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[10].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[10].dat->mem/sizeof(double)));

  int base11 = args[11].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> viscosity_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[11].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[11].dat->mem/sizeof(double)));

  int base12 = args[12].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> energy0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[12].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[12].dat->mem/sizeof(double)));

  int base13 = args[13].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> energy1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[13].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[13].dat->mem/sizeof(double)));

  int base14 = args[14].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> zarea_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[14].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[14].dat->mem/sizeof(double)));

  int base15 = args[15].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> zvel0_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[15].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[15].dat->mem/sizeof(double)));

  int base16 = args[16].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> zvel1_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[16].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[16].dat->mem/sizeof(double)));



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 17);
  ops_halo_exchanges(args,17,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[103].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_xarea = xarea_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_xvel0 = xvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_xvel1 = xvel1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_yarea = yarea_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_yvel0 = yvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_yvel1 = yvel1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_volume_change = volume_change_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_volume = volume_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_pressure = pressure_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_density0 = density0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_density1 = density1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_viscosity = viscosity_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_energy0 = energy0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_energy1 = energy1_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_zarea = zarea_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_zvel0 = zvel0_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_zvel1 = zvel1_p.get_access<cl::sycl::access::mode::read_write>(cgh);

    auto dt_sycl = (*dt_p).template get_access<cl::sycl::access::mode::read>(cgh);

    cgh.parallel_for<class PdV_kernel_nopredict_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
          ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
         ,((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y
         ,((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z
           ),cl::sycl::range<3>(block->instance->OPS_block_size_x
           , block->instance->OPS_block_size_y
           , block->instance->OPS_block_size_z
           )), [=](cl::sycl::nd_item<3> item) {
      cl::sycl::cl_int n_z = item.get_global_id()[2]+start_2;
      cl::sycl::cl_int n_y = item.get_global_id()[1]+start_1;
      cl::sycl::cl_int n_x = item.get_global_id()[0]+start_0;
      const ACC<double> xarea(xdim0_PdV_kernel_nopredict, ydim0_PdV_kernel_nopredict, &Accessor_xarea[0] + base0 + n_x*1 + n_y * xdim0_PdV_kernel_nopredict*1 + n_z * xdim0_PdV_kernel_nopredict * ydim0_PdV_kernel_nopredict*1);
      const ACC<double> xvel0(xdim1_PdV_kernel_nopredict, ydim1_PdV_kernel_nopredict, &Accessor_xvel0[0] + base1 + n_x*1 + n_y * xdim1_PdV_kernel_nopredict*1 + n_z * xdim1_PdV_kernel_nopredict * ydim1_PdV_kernel_nopredict*1);
      const ACC<double> xvel1(xdim2_PdV_kernel_nopredict, ydim2_PdV_kernel_nopredict, &Accessor_xvel1[0] + base2 + n_x*1 + n_y * xdim2_PdV_kernel_nopredict*1 + n_z * xdim2_PdV_kernel_nopredict * ydim2_PdV_kernel_nopredict*1);
      const ACC<double> yarea(xdim3_PdV_kernel_nopredict, ydim3_PdV_kernel_nopredict, &Accessor_yarea[0] + base3 + n_x*1 + n_y * xdim3_PdV_kernel_nopredict*1 + n_z * xdim3_PdV_kernel_nopredict * ydim3_PdV_kernel_nopredict*1);
      const ACC<double> yvel0(xdim4_PdV_kernel_nopredict, ydim4_PdV_kernel_nopredict, &Accessor_yvel0[0] + base4 + n_x*1 + n_y * xdim4_PdV_kernel_nopredict*1 + n_z * xdim4_PdV_kernel_nopredict * ydim4_PdV_kernel_nopredict*1);
      const ACC<double> yvel1(xdim5_PdV_kernel_nopredict, ydim5_PdV_kernel_nopredict, &Accessor_yvel1[0] + base5 + n_x*1 + n_y * xdim5_PdV_kernel_nopredict*1 + n_z * xdim5_PdV_kernel_nopredict * ydim5_PdV_kernel_nopredict*1);
      ACC<double> volume_change(xdim6_PdV_kernel_nopredict, ydim6_PdV_kernel_nopredict, &Accessor_volume_change[0] + base6 + n_x*1 + n_y * xdim6_PdV_kernel_nopredict*1 + n_z * xdim6_PdV_kernel_nopredict * ydim6_PdV_kernel_nopredict*1);
      const ACC<double> volume(xdim7_PdV_kernel_nopredict, ydim7_PdV_kernel_nopredict, &Accessor_volume[0] + base7 + n_x*1 + n_y * xdim7_PdV_kernel_nopredict*1 + n_z * xdim7_PdV_kernel_nopredict * ydim7_PdV_kernel_nopredict*1);
      const ACC<double> pressure(xdim8_PdV_kernel_nopredict, ydim8_PdV_kernel_nopredict, &Accessor_pressure[0] + base8 + n_x*1 + n_y * xdim8_PdV_kernel_nopredict*1 + n_z * xdim8_PdV_kernel_nopredict * ydim8_PdV_kernel_nopredict*1);
      const ACC<double> density0(xdim9_PdV_kernel_nopredict, ydim9_PdV_kernel_nopredict, &Accessor_density0[0] + base9 + n_x*1 + n_y * xdim9_PdV_kernel_nopredict*1 + n_z * xdim9_PdV_kernel_nopredict * ydim9_PdV_kernel_nopredict*1);
      ACC<double> density1(xdim10_PdV_kernel_nopredict, ydim10_PdV_kernel_nopredict, &Accessor_density1[0] + base10 + n_x*1 + n_y * xdim10_PdV_kernel_nopredict*1 + n_z * xdim10_PdV_kernel_nopredict * ydim10_PdV_kernel_nopredict*1);
      const ACC<double> viscosity(xdim11_PdV_kernel_nopredict, ydim11_PdV_kernel_nopredict, &Accessor_viscosity[0] + base11 + n_x*1 + n_y * xdim11_PdV_kernel_nopredict*1 + n_z * xdim11_PdV_kernel_nopredict * ydim11_PdV_kernel_nopredict*1);
      const ACC<double> energy0(xdim12_PdV_kernel_nopredict, ydim12_PdV_kernel_nopredict, &Accessor_energy0[0] + base12 + n_x*1 + n_y * xdim12_PdV_kernel_nopredict*1 + n_z * xdim12_PdV_kernel_nopredict * ydim12_PdV_kernel_nopredict*1);
      ACC<double> energy1(xdim13_PdV_kernel_nopredict, ydim13_PdV_kernel_nopredict, &Accessor_energy1[0] + base13 + n_x*1 + n_y * xdim13_PdV_kernel_nopredict*1 + n_z * xdim13_PdV_kernel_nopredict * ydim13_PdV_kernel_nopredict*1);
      const ACC<double> zarea(xdim14_PdV_kernel_nopredict, ydim14_PdV_kernel_nopredict, &Accessor_zarea[0] + base14 + n_x*1 + n_y * xdim14_PdV_kernel_nopredict*1 + n_z * xdim14_PdV_kernel_nopredict * ydim14_PdV_kernel_nopredict*1);
      const ACC<double> zvel0(xdim15_PdV_kernel_nopredict, ydim15_PdV_kernel_nopredict, &Accessor_zvel0[0] + base15 + n_x*1 + n_y * xdim15_PdV_kernel_nopredict*1 + n_z * xdim15_PdV_kernel_nopredict * ydim15_PdV_kernel_nopredict*1);
      const ACC<double> zvel1(xdim16_PdV_kernel_nopredict, ydim16_PdV_kernel_nopredict, &Accessor_zvel1[0] + base16 + n_x*1 + n_y * xdim16_PdV_kernel_nopredict*1 + n_z * xdim16_PdV_kernel_nopredict * ydim16_PdV_kernel_nopredict*1);
      //USER CODE
      if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
        

  double recip_volume, energy_change;
  double right_flux, left_flux, top_flux, bottom_flux, back_flux, front_flux, total_flux;

  left_flux = ( xarea(0,0,0) * ( xvel0(0,0,0) + xvel0(0,1,0) +
                                           xvel0(0,0,1) + xvel0(0,1,1) +
                                           xvel1(0,0,0) + xvel1(0,1,0) +
                                           xvel1(0,0,1) + xvel1(0,1,1) ) ) * 0.125 * dt_sycl[0];
  right_flux = ( xarea(1,0,0) * ( xvel0(1,0,0) + xvel0(1,1,0) +
                                            xvel0(1,0,1) + xvel0(1,1,1) +
                                            xvel1(1,0,0) + xvel1(1,1,0) +
                                            xvel1(1,0,1) + xvel1(1,1,1) ) ) * 0.125 * dt_sycl[0];

  bottom_flux = ( yarea(0,0,0) * ( yvel0(0,0,0) + yvel0(1,0,0) +
                                             yvel0(0,0,1) + yvel0(1,0,1) +
                                             yvel1(0,0,0) + yvel1(1,0,0) +
                                             yvel1(0,0,1) + yvel1(1,0,1) ) ) * 0.125* dt_sycl[0];
  top_flux = ( yarea(0,1,0) * ( yvel0(0,1,0) + yvel0(1,1,0) +
                                          yvel0(0,1,1) + yvel0(1,1,1) +
                                          yvel1(0,1,0) + yvel1(1,1,0) +
                                          yvel1(0,1,1) + yvel1(1,1,1)) ) * 0.125 * dt_sycl[0];

  back_flux = ( zarea(0,0,0) * ( zvel0(0,0,0) + zvel0(1,0,0) +
                                            zvel0(0,1,0) + zvel0(1,1,0) +
                                            zvel1(0,0,0) + zvel1(1,0,0) +
                                            zvel1(0,1,0) + zvel1(1,1,0) ) ) * 0.125* dt_sycl[0];
  front_flux = ( zarea(0,0,1) * ( zvel0(0,0,1) + zvel0(1,0,1) +
                                             zvel0(0,1,1) + zvel0(1,1,1) +
                                             zvel1(0,0,1) + zvel1(1,0,1) +
                                             zvel1(0,1,1) + zvel1(1,1,1)) ) * 0.125 * dt_sycl[0];

  total_flux = right_flux - left_flux + top_flux - bottom_flux + front_flux - back_flux;

  volume_change(0,0,0) = (volume(0,0,0))/(volume(0,0,0) + total_flux);
  recip_volume = 1.0/volume(0,0,0);
  energy_change = ( pressure(0,0,0)/density0(0,0,0) +
                    viscosity(0,0,0)/density0(0,0,0) ) * total_flux * recip_volume;
  energy1(0,0,0) = energy0(0,0,0) - energy_change;
  density1(0,0,0) = density0(0,0,0) * volume_change(0,0,0);


      }
    });
  });
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[103].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 17);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[13],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[103].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[103].transfer += ops_compute_transfer(dim, start, end, &arg16);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_PdV_kernel_nopredict(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 103;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 103;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 17;
  desc->args = (ops_arg*)ops_malloc(17*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg15.dat->index;
  desc->args[16] = arg16;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg16.dat->index;
  desc->function = ops_par_loop_PdV_kernel_nopredict_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,103,"PdV_kernel_nopredict");
  }
  ops_enqueue_kernel(desc);
}
#endif
