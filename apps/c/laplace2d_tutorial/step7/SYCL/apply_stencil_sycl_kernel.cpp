//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_apply_stencil(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_apply_stencil_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,4)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"apply_stencil");
    block->instance->OPS_kernels[4].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "apply_stencil");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_apply_stencil = args[0].dat->size[0];
  int xdim1_apply_stencil = args[1].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> A_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double)));

  int base1 = args[1].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> Anew_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double)));

  #ifdef OPS_MPI
  double * __restrict__ p_a2 = (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a2 = (double *)((ops_reduction)args[2].data)->data;
  #endif //OPS_MPI

  int maxblocks = (end[0]-start[0]-1)/block->instance->OPS_block_size_x+1;
  maxblocks *= (end[1]-start[1]-1)/block->instance->OPS_block_size_y+1;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg2.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg2_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg2.data)[d+b*1] = -INFINITY_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  mvReductArraysToDevice(block->instance,reduct_bytes);
  cl::sycl::buffer<char,1> *reduct = static_cast<cl::sycl::buffer<char,1> *>((void*)block->instance->OPS_reduct_d);

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges(args,3,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int start_1 = start[1];
  block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_A = A_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_Anew = Anew_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_reduct_char = reduct->get_access<cl::sycl::access::mode::read_write>(cgh);
    cl::sycl::accessor<char, 1, cl::sycl::access::mode::read_write, cl::sycl::access::target::local> local_mem(reduct_size*cl::sycl::range<1>(block->instance->OPS_block_size_x*block->instance->OPS_block_size_y),cgh);


    cgh.parallel_for<class apply_stencil_kernel>(cl::sycl::nd_range<2>(cl::sycl::range<2>(end[0]-start[0],end[1]-start[1]),cl::sycl::range<2>(block->instance->OPS_block_size_x, block->instance->OPS_block_size_y)), [=](cl::sycl::nd_item<2> item) {
      cl::sycl::cl_int n_y = item.get_global_id()[1]+start_1;
      cl::sycl::cl_int n_x = item.get_global_id()[0]+start_0;
      const ACC<double> A(xdim0_apply_stencil, &Accessor_A[0] + base0 + n_x*1 + n_y * xdim0_apply_stencil*1);
      ACC<double> Anew(xdim1_apply_stencil, &Accessor_Anew[0] + base1 + n_x*1 + n_y * xdim1_apply_stencil*1);
      double error[1];
      error[0] = -INFINITY_double;
      //USER CODE
      
  Anew(0,0) = 0.25f * ( A(1,0) + A(-1,0)
      + A(0,-1) + A(0,1));
  *error = cl::sycl::fmax( *error, cl::sycl::fabs(Anew(0,0)-A(0,0)));

      int group_size = item.get_local_range(0);
      group_size *= item.get_local_range(1);
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_MAX>(((double*)&Accessor_reduct_char[arg2_offset]) + d+item.get_group_linear_id()*1, error[0], (double*)&local_mem[0], item, group_size);
      }
    });
  });
  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a2[d] = MAX(p_a2[d],((double *)arg2.data)[d+b*1]);
    }
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[4].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_apply_stencil(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 4;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 4;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 3;
  desc->args = (ops_arg*)ops_malloc(3*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->function = ops_par_loop_apply_stencil_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"apply_stencil");
  }
  ops_enqueue_kernel(desc);
}
#endif
