//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_calc_dt_kernel_get(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
#else
void ops_par_loop_calc_dt_kernel_get_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4,
 arg5};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,6,range,100)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,100,"calc_dt_kernel_get");
    block->instance->OPS_kernels[100].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "calc_dt_kernel_get");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 6,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_calc_dt_kernel_get = args[0].dat->size[0];
  int ydim0_calc_dt_kernel_get = args[0].dat->size[1];
  int xdim1_calc_dt_kernel_get = args[1].dat->size[0];
  int ydim1_calc_dt_kernel_get = args[1].dat->size[1];
  int xdim4_calc_dt_kernel_get = args[4].dat->size[0];
  int ydim4_calc_dt_kernel_get = args[4].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> cellx_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double)));

  int base1 = args[1].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> celly_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double)));

  #ifdef OPS_MPI
  double * __restrict__ p_a2 = (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a2 = (double *)((ops_reduction)args[2].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a3 = (double *)(((ops_reduction)args[3].data)->data + ((ops_reduction)args[3].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a3 = (double *)((ops_reduction)args[3].data)->data;
  #endif //OPS_MPI


  int base4 = args[4].dat->base_offset/sizeof(double);
  cl::sycl::buffer<double,1> cellz_p = static_cast<cl::sycl::buffer<char,1> *>((void*)args[4].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[4].dat->mem/sizeof(double)));

  #ifdef OPS_MPI
  double * __restrict__ p_a5 = (double *)(((ops_reduction)args[5].data)->data + ((ops_reduction)args[5].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a5 = (double *)((ops_reduction)args[5].data)->data;
  #endif //OPS_MPI


  int maxblocks = (end[0]-start[0]-1)/block->instance->OPS_block_size_x+1;
  maxblocks *= (end[1]-start[1]-1)/block->instance->OPS_block_size_y+1;
  maxblocks *= (end[2]-start[2]-1)/block->instance->OPS_block_size_z+1;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg2.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg2_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg2.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg3.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg3_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg3.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg5.data = block->instance->OPS_reduct_h + reduct_bytes;
  int arg5_offset = reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg5.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  mvReductArraysToDevice(block->instance,reduct_bytes);
  cl::sycl::buffer<char,1> *reduct = static_cast<cl::sycl::buffer<char,1> *>((void*)block->instance->OPS_reduct_d);

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 6);
  ops_halo_exchanges(args,6,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[100].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_cellx = cellx_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_celly = celly_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_cellz = cellz_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_reduct_char = reduct->get_access<cl::sycl::access::mode::read_write>(cgh);
    cl::sycl::accessor<char, 1, cl::sycl::access::mode::read_write, cl::sycl::access::target::local> local_mem(reduct_size*cl::sycl::range<1>(block->instance->OPS_block_size_x*block->instance->OPS_block_size_y),cgh);


    cgh.parallel_for<class calc_dt_kernel_get_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
          ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
         ,((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y
         ,((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z
           ),cl::sycl::range<3>(block->instance->OPS_block_size_x
           , block->instance->OPS_block_size_y
           , block->instance->OPS_block_size_z
           )), [=](cl::sycl::nd_item<3> item) {
      cl::sycl::cl_int n_z = item.get_global_id()[2]+start_2;
      cl::sycl::cl_int n_y = item.get_global_id()[1]+start_1;
      cl::sycl::cl_int n_x = item.get_global_id()[0]+start_0;
      const ACC<double> cellx(xdim0_calc_dt_kernel_get, ydim0_calc_dt_kernel_get, &Accessor_cellx[0] + base0 + n_x*1 + n_y * xdim0_calc_dt_kernel_get*0 + n_z * xdim0_calc_dt_kernel_get * ydim0_calc_dt_kernel_get*0);
      const ACC<double> celly(xdim1_calc_dt_kernel_get, ydim1_calc_dt_kernel_get, &Accessor_celly[0] + base1 + n_x*0 + n_y * xdim1_calc_dt_kernel_get*1 + n_z * xdim1_calc_dt_kernel_get * ydim1_calc_dt_kernel_get*0);
      const ACC<double> cellz(xdim4_calc_dt_kernel_get, ydim4_calc_dt_kernel_get, &Accessor_cellz[0] + base4 + n_x*0 + n_y * xdim4_calc_dt_kernel_get*0 + n_z * xdim4_calc_dt_kernel_get * ydim4_calc_dt_kernel_get*1);
      double xl_pos[1];
      xl_pos[0] = ZERO_double;
      double yl_pos[1];
      yl_pos[0] = ZERO_double;
      double zl_pos[1];
      zl_pos[0] = ZERO_double;
      //USER CODE
      if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
        
  *xl_pos = cellx(0,0,0);
  *yl_pos = celly(0,0,0);
  *zl_pos = cellz(0,0,0);

      }
      int group_size = item.get_local_range(0);
      group_size *= item.get_local_range(1);
      group_size *= item.get_local_range(2);
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg2_offset]) + d+item.get_group_linear_id()*1, xl_pos[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg3_offset]) + d+item.get_group_linear_id()*1, yl_pos[0], (double*)&local_mem[0], item, group_size);
      }
      for ( int d=0; d<1; d++ ){
        ops_reduction_sycl<OPS_INC>(((double*)&Accessor_reduct_char[arg5_offset]) + d+item.get_group_linear_id()*1, zl_pos[0], (double*)&local_mem[0], item, group_size);
      }
    });
  });
  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a2[d] = p_a2[d] + ((double *)arg2.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a3[d] = p_a3[d] + ((double *)arg3.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a5[d] = p_a5[d] + ((double *)arg5.data)[d+b*1];
    }
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[100].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 6);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[100].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[100].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[100].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[100].transfer += ops_compute_transfer(dim, start, end, &arg4);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_calc_dt_kernel_get(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 100;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 100;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 6;
  desc->args = (ops_arg*)ops_malloc(6*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->args[3] = arg3;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->function = ops_par_loop_calc_dt_kernel_get_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,100,"calc_dt_kernel_get");
  }
  ops_enqueue_kernel(desc);
}
#endif
