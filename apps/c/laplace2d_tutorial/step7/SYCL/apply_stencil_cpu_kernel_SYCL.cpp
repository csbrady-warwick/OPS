//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_apply_stencil(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_apply_stencil_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,4)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"apply_stencil");
    block->instance->OPS_kernels[4].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "apply_stencil");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #ifdef OPS_MPI
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_apply_stencil = args[0].dat->size[0];
  int xdim1_apply_stencil = args[1].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  cl::sycl::buffer<double,1> A = static_cast<cl::sycl::buffer<char,1> *>(args[0].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[0].dat->mem/sizeof(double) ));
  //TODO base0 is now in bytes, convert to size in doubles, use when creating accessor
  double * __restrict__ A_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  cl::sycl::buffer<double,1> Anew = static_cast<cl::sycl::buffer<char,1> *>(args[1].data_d)->reinterpret<double,1>(cl::sycl::range<1>(args[1].dat->mem/sizeof(double) ));
  double * __restrict__ Anew_p = (double *)(args[1].data + base1);

  #ifdef OPS_MPI
  double * __restrict__ p_a2 = (double *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a2 = (double *)((ops_reduction)args[2].data)->data;
  #endif //OPS_MPI

  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg2.data = block->instance->OPS_reduct_h + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg2.data)[d+b*1] = -INFINITY_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));


  mvReductArraysToDevice(block->instance,reduct_bytes);

  cl::sycl::buffer<double,1> error = static_cast<cl::sycl::buffer<char,1> *>(OPS_reduct_d)->reinterpret<double,1>(cl::sycl::range<1>(reduct_bytes/sizeof(double) ));



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges_device(args,3,range);
  ops_H_D_exchanges_device(args, 3);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
  }

  double p_a2_0 = p_a2[0];
  //  #########################  - SYCL CODE FROM HERE -  ########################
  block->instance->sycl_instance->queue.submit([&](cl::sycl::handler &cgh) {
    //accessors
    auto Accessor_A = A_p.get_access<cl::sycl::access::mode::read>(cgh);
    auto Accessor_Anew = Anew_p.get_access<cl::sycl::access::mode::read_write>(cgh);
    auto Accessor_error = error.get_access<cl::sycl::access::mode::write>(cgh);
    cl::sycl::accessor<double, 1, cl::sycl::access::mode::read_write, cl::sycl::access::target::local>
        local_mem(cl::sycl::range<1>(256),cgh);
        
    cgh.parallel_for<class MyLaplace>(cl::sycl::nd_range<2>(cl::sycl::range<2>(end[0],end[1]),cl::sycl::range<2>(block->instance->OPS_block_size_x, block->instance->OPS_block_size_y)), [=](cl::sycl::nd_item<2> item) {
      //get i dimension id
      cl::sycl::cl_int global_i_id = item.get_global_id()[0]+1;
      //get j dimension id
      cl::sycl::cl_int global_j_id = item.get_global_id()[1]+1;
        
      cl::sycl::cl_int linear_id = item.get_local_linear_id();
      //TODO: need ACC objects here. use base0 offset 
      const ACC<double> A(xdim0_apply_stencil, Accessor_A + n_x*1 + n_y * xdim0_apply_stencil*1);
      ACC<double> Anew(xdim1_apply_stencil, Accessor_Anew + n_x*1 + n_y * xdim1_apply_stencil*1);
      double error[1];
      error[0] = p_a2[0];
      
      // #USER CODE
      Anew(0,0) = 0.25f * ( A(1,0) + A(-1,0)
          + A(0,-1) + A(0,1));
      *error = fmax( *error, fabs(Anew(0,0)-A(0,0)));
      // #USER CODE END
      
      // BARRIER
      item.barrier(cl::sycl::access::fence_space::local_space);
      
      // ERROR REDUCTION
      ops_reduction<OPS_MAX>(Accessor_error, item.get_group_linear_id(), *error, local_mem, item);
      /*
      for(int i = 256/2; i > 0; i /= 2) {
        if(linear_id < i){
          local_mem[linear_id] = cl::sycl::fmax(local_mem[linear_id],local_mem[linear_id+i]);
        }
        // BARRIER
        item.barrier(cl::sycl::access::fence_space::local_space);
      }
      */
      /*if(linear_id == 0){
        Accessor4[item.get_group_linear_id()] = local_mem[0];
      }
      */
    });
  });
{
  auto HostAccessor = error.get_access<cl::sycl::access::mode::read>();
  for(int i = 0; i < error.get_count(); i++){
    HostAccessor[0] = fmax(error,HostAccessor[i]);
  }
  p_a2[0] = HostAccessor[0]
}

/*      
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      const ACC<double> A(xdim0_apply_stencil, A_p + n_x*1 + n_y * xdim0_apply_stencil*1);
      ACC<double> Anew(xdim1_apply_stencil, Anew_p + n_x*1 + n_y * xdim1_apply_stencil*1);
      double error[1];
      error[0] = p_a2[0];
      OB
      Anew(0,0) = 0.25f * ( A(1,0) + A(-1,0)
          + A(0,-1) + A(0,1));
      *error = fmax( *error, fabs(Anew(0,0)-A(0,0)));

      p_a2_0 = MAX(p_a2_0,error[0]);
    }
  }

  p_a2[0] = p_a2_0;
*/
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[4].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3_device(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}
#undef OPS_ACC0
#undef OPS_ACC1


#ifdef OPS_LAZY
void ops_par_loop_apply_stencil(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 4;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 4;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 3;
  desc->args = (ops_arg*)malloc(3*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->function = ops_par_loop_apply_stencil_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(4,"apply_stencil");
  }
  ops_enqueue_kernel(desc);
}
#endif
